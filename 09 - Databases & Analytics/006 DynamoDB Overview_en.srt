1
00:00:00,000 --> 00:00:02,000
So now let's talk about DynamoDB.

2
00:00:02,000 --> 00:00:06,000
DynamoDB is a fully managed, highly available database

3
00:00:06,000 --> 00:00:09,000
with replication across three availability zone.

4
00:00:09,000 --> 00:00:12,000
It is part of the NoSQL database family,

5
00:00:12,000 --> 00:00:14,000
so it's not a relational database.

6
00:00:14,000 --> 00:00:18,000
DynamoDB is one of the flagship product of AWS.

7
00:00:18,000 --> 00:00:20,000
It scales to massive workload

8
00:00:20,000 --> 00:00:23,000
and it's distributed serverless database,

9
00:00:23,000 --> 00:00:25,000
that means that we don't provision any servers.

10
00:00:25,000 --> 00:00:27,000
With RDS or with ElastiCache

11
00:00:27,000 --> 00:00:29,000
we need to provision a instance type,

12
00:00:29,000 --> 00:00:31,000
but with DynamoDB we don't.

13
00:00:31,000 --> 00:00:33,000
So it's called a serverless database,

14
00:00:33,000 --> 00:00:34,000
but there are still servers in the backend,

15
00:00:34,000 --> 00:00:35,000
we just don't see them.

16
00:00:35,000 --> 00:00:37,000
So DynamoDB is great

17
00:00:37,000 --> 00:00:40,000
because it scales to millions of requests per seconds,

18
00:00:40,000 --> 00:00:43,000
trillions of rows, and hundreds of terabytes of storage.

19
00:00:43,000 --> 00:00:45,000
It has fast and consistent performance.

20
00:00:45,000 --> 00:00:49,000
And so anytime you need a single digit millisecond latency

21
00:00:49,000 --> 00:00:51,000
with low latency retrieval,

22
00:00:51,000 --> 00:00:53,000
DynamoDB is the database for you.

23
00:00:53,000 --> 00:00:56,000
So you would be looking for keywords in your exam,

24
00:00:56,000 --> 00:00:59,000
such as serverless and low latency.

25
00:00:59,000 --> 00:01:02,000
For example, single digit millisecond latency.

26
00:01:02,000 --> 00:01:04,000
It is integrated with IAM for security,

27
00:01:04,000 --> 00:01:07,000
authorization, and administration.

28
00:01:07,000 --> 00:01:10,000
Has low cost and auto scaling capabilities.

29
00:01:10,000 --> 00:01:10,000
And finally,

30
00:01:10,000 --> 00:01:14,000
a standard and infrequent access, IA, table class

31
00:01:14,000 --> 00:01:18,000
based on how you want to classify your data for cost saving.

32
00:01:18,000 --> 00:01:20,000
So the question you may have is,

33
00:01:20,000 --> 00:01:22,000
what type of data goes into DynamoDB?

34
00:01:22,000 --> 00:01:24,000
Well, it's a key value database

35
00:01:24,000 --> 00:01:26,000
and the data looks like this.

36
00:01:26,000 --> 00:01:28,000
You have a primary key,

37
00:01:28,000 --> 00:01:30,000
which is made of one or two columns,

38
00:01:30,000 --> 00:01:32,000
a partition key and a sort key.

39
00:01:32,000 --> 00:01:35,000
And then attributes on the right hand side

40
00:01:35,000 --> 00:01:39,000
where you can define your own columns for your data.

41
00:01:39,000 --> 00:01:42,000
Finally, all the items are going to be row by row.

42
00:01:42,000 --> 00:01:44,000
And this is how a DynamoDB table works.

43
00:01:44,000 --> 00:01:46,000
Very, very simple,

44
00:01:46,000 --> 00:01:48,000
but again, remember it's a NoSQL database.

45
00:01:48,000 --> 00:01:51,000
It has low latency retrieval of data

46
00:01:51,000 --> 00:01:56,000
and you also get access to a serverless database.

47
00:01:56,000 --> 00:01:59,000
Then we have DynamoDB Accelerator also called DAX.

48
00:01:59,000 --> 00:02:01,000
In the exam both can be used.

49
00:02:01,000 --> 00:02:05,000
So it is a fully managed in-memory cache for DynamoDB.

50
00:02:05,000 --> 00:02:07,000
So this is a cache that's specific for DynamoDB

51
00:02:07,000 --> 00:02:09,000
so it's not like ElastiCache.

52
00:02:09,000 --> 00:02:10,000
So for example, say your application wants

53
00:02:10,000 --> 00:02:14,000
to access DynamoDB tables in DynamoDB,

54
00:02:14,000 --> 00:02:15,000
for this if you want to cache

55
00:02:15,000 --> 00:02:18,000
the most frequently read objects,

56
00:02:18,000 --> 00:02:20,000
then you would use DAX or DynamoDB Accelerator

57
00:02:20,000 --> 00:02:22,000
as a cache in between.

58
00:02:22,000 --> 00:02:24,000
And DAX is made just for DynamoDB. Okay?

59
00:02:24,000 --> 00:02:26,000
So you would not use ElastiCache in this case.

60
00:02:26,000 --> 00:02:28,000
Even though you could, you would use DAX

61
00:02:28,000 --> 00:02:30,000
because it's already really, really well integrated

62
00:02:30,000 --> 00:02:32,000
with DynamoDB.

63
00:02:32,000 --> 00:02:34,000
So this is going to give you a 10x performance improvement.

64
00:02:34,000 --> 00:02:36,000
So instead of digit,

65
00:02:36,000 --> 00:02:38,000
instead of single digit millisecond latency to read records,

66
00:02:38,000 --> 00:02:40,000
you will have microseconds latency

67
00:02:40,000 --> 00:02:42,000
when accessing your DynamoDB tables.

68
00:02:42,000 --> 00:02:44,000
It's going to be fully secure, highly scalable,

69
00:02:44,000 --> 00:02:45,000
and highly available.

70
00:02:45,000 --> 00:02:47,000
And the difference with ElastiCache again,

71
00:02:47,000 --> 00:02:49,000
is that DAX is only used in,

72
00:02:49,000 --> 00:02:51,000
it's fully integrated with DynamoDB.

73
00:02:51,000 --> 00:02:54,000
Whereas ElastiCache can be used for other types of databases

74
00:02:54,000 --> 00:02:57,000
to provide caching capabilities.

75
00:02:57,000 --> 00:02:58,000
So that's it for this lecture.

76
00:02:58,000 --> 00:02:59,000
I hope you liked it

77
00:02:59,000 --> 00:03:00,000
and I will see you in the next lecture.


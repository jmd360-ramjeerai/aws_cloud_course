1
00:00:00,000 --> 00:00:01,000
Okay,

2
00:00:01,000 --> 00:00:03,000
so we're going to practice using the Lambda service.

3
00:00:03,000 --> 00:00:05,000
And when you go in Lambda, you may end up on this screen,

4
00:00:05,000 --> 00:00:07,000
but there's another screen I really like.

5
00:00:07,000 --> 00:00:08,000
And so if you're in your URL,

6
00:00:08,000 --> 00:00:11,000
you replace /discover by /begin,

7
00:00:11,000 --> 00:00:13,000
you may end up on this screen,

8
00:00:13,000 --> 00:00:15,000
which I really like because it has an educational value

9
00:00:15,000 --> 00:00:16,000
I want to show you.

10
00:00:16,000 --> 00:00:18,000
So Lambda is here to help you run code

11
00:00:18,000 --> 00:00:20,000
without thinking about servers,

12
00:00:20,000 --> 00:00:23,000
and this makes it a truly serverless service.

13
00:00:23,000 --> 00:00:25,000
So the idea is that we can use any type

14
00:00:25,000 --> 00:00:26,000
of programming language we want.

15
00:00:26,000 --> 00:00:29,000
For example, .Net Core, Go, Java, Node JS, Python, Ruby,

16
00:00:29,000 --> 00:00:31,000
or any custom runtime,

17
00:00:31,000 --> 00:00:34,000
if you want to have a runtime provided by an open source,

18
00:00:34,000 --> 00:00:37,000
for example, the Lambda Rust Runtime is possible.

19
00:00:37,000 --> 00:00:40,000
And so from this code, you will have it written,

20
00:00:40,000 --> 00:00:42,000
upload it into the Lambda console,

21
00:00:42,000 --> 00:00:46,000
and then AWS Lambda will run the code for you.

22
00:00:46,000 --> 00:00:48,000
So let's take a very simple code.

23
00:00:48,000 --> 00:00:50,000
For example, Python, we have a Lambda handler,

24
00:00:50,000 --> 00:00:51,000
it's going to print the event,

25
00:00:51,000 --> 00:00:54,000
and then say, "Return Hello from Lambda."

26
00:00:54,000 --> 00:00:57,000
So let's click on Run and we get Hello from Lambda.

27
00:00:57,000 --> 00:00:59,000
So that means that the Lambda function just ran the code

28
00:00:59,000 --> 00:01:01,000
that we have provided right here.

29
00:01:01,000 --> 00:01:02,000
Very simple, right?

30
00:01:02,000 --> 00:01:04,000
Next, how does Lambda functions get invoked?

31
00:01:04,000 --> 00:01:06,000
So we can click on the Run button obviously,

32
00:01:06,000 --> 00:01:09,000
but also, we can have Lambda respond to events.

33
00:01:09,000 --> 00:01:10,000
And this is what I want to show you,

34
00:01:10,000 --> 00:01:11,000
I think it's really cool.

35
00:01:11,000 --> 00:01:14,000
So as we can see, events can come from various sources.

36
00:01:14,000 --> 00:01:17,000
For example, in this one, this is streaming analytics.

37
00:01:17,000 --> 00:01:20,000
And so as the streaming analytics is sending events

38
00:01:20,000 --> 00:01:21,000
into a Lambda function,

39
00:01:21,000 --> 00:01:23,000
the Lambda function is returning Hello from Lambda,

40
00:01:23,000 --> 00:01:24,000
Hello from Lambda, Hello from Lambda,

41
00:01:24,000 --> 00:01:25,000
and so on.

42
00:01:25,000 --> 00:01:27,000
But it's not just those streaming analytics.

43
00:01:27,000 --> 00:01:30,000
If you click on the phone right here,

44
00:01:30,000 --> 00:01:33,000
it's going to send a message into a mobile IoT backend.

45
00:01:33,000 --> 00:01:36,000
And this IoT backend will also invoke our Lambda function.

46
00:01:36,000 --> 00:01:38,000
Same for if we take a photo,

47
00:01:38,000 --> 00:01:41,000
and upload it into an S3 bucket for data processing,

48
00:01:41,000 --> 00:01:43,000
then the Lambda function will be invoked.

49
00:01:43,000 --> 00:01:44,000
But the cool thing is that

50
00:01:44,000 --> 00:01:46,000
if you start clicking a lot on one of these sources,

51
00:01:46,000 --> 00:01:49,000
you can see on the right hand side, we have more cog wheels.

52
00:01:49,000 --> 00:01:52,000
So as the left hand side flow,

53
00:01:52,000 --> 00:01:54,000
and invocations of Lambda scales,

54
00:01:54,000 --> 00:01:56,000
then the number of Lambda invocations,

55
00:01:56,000 --> 00:01:58,000
and concurrent Lambda functions running

56
00:01:58,000 --> 00:01:59,000
will be scaling as well.

57
00:01:59,000 --> 00:02:01,000
So it's really cool because that means that

58
00:02:01,000 --> 00:02:02,000
as we have more load,

59
00:02:02,000 --> 00:02:05,000
automatically Lambda will scale with our load.

60
00:02:05,000 --> 00:02:08,000
And that is a whole power of using Lambda

61
00:02:08,000 --> 00:02:09,000
as a compute platform,

62
00:02:09,000 --> 00:02:11,000
and this is why Lambda is serverless,

63
00:02:11,000 --> 00:02:13,000
and it scales really well.

64
00:02:13,000 --> 00:02:15,000
So if we go in here, as we can see,

65
00:02:15,000 --> 00:02:16,000
as the Lambda function is invoked,

66
00:02:16,000 --> 00:02:18,000
we get more invocations over time,

67
00:02:18,000 --> 00:02:21,000
and the cost remains zero because there's a free tier.

68
00:02:21,000 --> 00:02:25,000
And as soon as we will pass 1 million invocations,

69
00:02:25,000 --> 00:02:28,000
then the Lambda function will start incurring some charges.

70
00:02:28,000 --> 00:02:30,000
So if we go in there and start having

71
00:02:30,000 --> 00:02:32,000
over 1 million invocations, here we go,

72
00:02:32,000 --> 00:02:34,000
now, we're getting some cents.

73
00:02:34,000 --> 00:02:37,000
As you can see, we are at almost 2 million invocations,

74
00:02:37,000 --> 00:02:40,000
and we have only 14 cents as a cost.

75
00:02:40,000 --> 00:02:43,000
So it's very, very, very cost-efficient

76
00:02:43,000 --> 00:02:46,000
to have a Lambda function and to run some workload at scale.

77
00:02:46,000 --> 00:02:47,000
So as you can see, you can play around,

78
00:02:47,000 --> 00:02:49,000
and seeing that the more you have invocations,

79
00:02:49,000 --> 00:02:51,000
the more the cost goes, but it's really, really controlled.

80
00:02:51,000 --> 00:02:55,000
And Lambda is, can be quite a cost-saving mechanism

81
00:02:55,000 --> 00:02:56,000
if you use it at scale.

82
00:02:56,000 --> 00:02:59,000
So this is just for the introduction to Lambda.

83
00:02:59,000 --> 00:03:01,000
So if I click on create a function,

84
00:03:01,000 --> 00:03:03,000
I can choose between three options,

85
00:03:03,000 --> 00:03:07,000
and I'm going to choose to use a blueprint for this one.

86
00:03:07,000 --> 00:03:08,000
And it's going to be the hello world function.

87
00:03:08,000 --> 00:03:11,000
So I'm just going to search by hello world,

88
00:03:11,000 --> 00:03:14,000
and then I will choose the Python version.

89
00:03:14,000 --> 00:03:16,000
So Python 3.10 in this example,

90
00:03:16,000 --> 00:03:18,000
but this could be a different version for you,

91
00:03:18,000 --> 00:03:20,000
as long as it's Python.

92
00:03:20,000 --> 00:03:22,000
Next, for the function name,

93
00:03:22,000 --> 00:03:25,000
we're going to enter demo-lambda,

94
00:03:26,000 --> 00:03:28,000
and then we're going to create a new role

95
00:03:28,000 --> 00:03:29,000
with basic Lambda permissions.

96
00:03:29,000 --> 00:03:32,000
This is going to be the IAM role of our Lambda function.

97
00:03:33,000 --> 00:03:35,000
Then we can have a look at the function code.

98
00:03:35,000 --> 00:03:37,000
So this is what a Lambda function looks like.

99
00:03:37,000 --> 00:03:39,000
So we have a Lambda handler.

100
00:03:39,000 --> 00:03:42,000
This is the function actually handles the event

101
00:03:42,000 --> 00:03:44,000
of invoking our Lambda function.

102
00:03:44,000 --> 00:03:45,000
And right now, it just prints a bunch

103
00:03:45,000 --> 00:03:48,000
of values and returns the key1.

104
00:03:48,000 --> 00:03:49,000
So we'll have a look at this in details

105
00:03:49,000 --> 00:03:51,000
when we test our function.

106
00:03:51,000 --> 00:03:54,000
So when you're ready, just click on create function.

107
00:03:54,000 --> 00:03:57,000
Okay, so my function is created and as we can see,

108
00:03:57,000 --> 00:03:58,000
the code has the code source in here.

109
00:03:58,000 --> 00:04:01,000
And if I click on lambda function.py and open it,

110
00:04:01,000 --> 00:04:03,000
we can see that the function code we had

111
00:04:03,000 --> 00:04:07,000
from before is now loaded into this code editor.

112
00:04:07,000 --> 00:04:08,000
So why don't we go ahead and test the function.

113
00:04:08,000 --> 00:04:10,000
So I'm going to click on test and we need

114
00:04:10,000 --> 00:04:13,000
to create a new test event, which is a hello world event,

115
00:04:13,000 --> 00:04:17,000
which contains key1, value1, key2, value2, key3, value3

116
00:04:17,000 --> 00:04:18,000
as adjacent documents.

117
00:04:18,000 --> 00:04:20,000
So I'll call this one DemoEvent,

118
00:04:22,000 --> 00:04:24,000
and click on Create.

119
00:04:24,000 --> 00:04:27,000
So now, the demo event was successfully saved.

120
00:04:27,000 --> 00:04:28,000
So if I click on test now,

121
00:04:28,000 --> 00:04:30,000
it was going to run the DemoEvent,

122
00:04:30,000 --> 00:04:32,000
and the response is value1,

123
00:04:32,000 --> 00:04:35,000
the function log is that value1 equals value1,

124
00:04:35,000 --> 00:04:38,000
value2 equals value2, value3 equals value3,

125
00:04:38,000 --> 00:04:43,000
which is just a result of this, three print statements.

126
00:04:43,000 --> 00:04:45,000
And finally, the response value is value1,

127
00:04:45,000 --> 00:04:48,000
again, due to this line of code.

128
00:04:48,000 --> 00:04:49,000
So it may not look like a match,

129
00:04:49,000 --> 00:04:52,000
but from a programmer's perspective, as you can see,

130
00:04:52,000 --> 00:04:55,000
you had just some code and it was uploaded into Lambda,

131
00:04:55,000 --> 00:04:58,000
and then it was run by Lambda very quickly.

132
00:04:58,000 --> 00:05:00,000
So this is a huge improvement if you're a developer,

133
00:05:00,000 --> 00:05:03,000
as you can see, to deploy the code and have it run.

134
00:05:03,000 --> 00:05:05,000
And on top of it, it runs seamlessly,

135
00:05:05,000 --> 00:05:08,000
and it will scale automatically and it is fully serverless.

136
00:05:08,000 --> 00:05:09,000
Okay?

137
00:05:09,000 --> 00:05:10,000
We didn't deploy any servers.

138
00:05:10,000 --> 00:05:12,000
Now, in terms of build duration,

139
00:05:12,000 --> 00:05:15,000
so if you go in here and scroll down, sorry.

140
00:05:15,000 --> 00:05:19,000
Then as you can see, the duration was 2.32 millisecond.

141
00:05:19,000 --> 00:05:22,000
We've been billed for three millisecond of execution,

142
00:05:22,000 --> 00:05:25,000
and here's the memory size that we've provisioned,

143
00:05:25,000 --> 00:05:28,000
and the one that was used and how much the init was,

144
00:05:28,000 --> 00:05:29,000
because this is the first time that

145
00:05:29,000 --> 00:05:31,000
we used our Lambda function.

146
00:05:31,000 --> 00:05:33,000
Now, if I run it again, oops,

147
00:05:33,000 --> 00:05:35,000
if I go back to my function, excuse me,

148
00:05:35,000 --> 00:05:38,000
and run this one again, as we can see now,

149
00:05:38,000 --> 00:05:41,000
the function duration was 1.33 millisecond.

150
00:05:41,000 --> 00:05:43,000
And on the right hand side, there was no initiation,

151
00:05:43,000 --> 00:05:46,000
because my Lambda function was ready to be used.

152
00:05:46,000 --> 00:05:47,000
Okay?

153
00:05:47,000 --> 00:05:49,000
So that's one way of doing things.

154
00:05:49,000 --> 00:05:50,000
Now, the other thing I'm going to show you is that

155
00:05:50,000 --> 00:05:53,000
from this Lambda function, we're able to configure it.

156
00:05:53,000 --> 00:05:55,000
So if I go into general configuration,

157
00:05:55,000 --> 00:05:57,000
we get some of the most important settings.

158
00:05:57,000 --> 00:05:59,000
The first one is around memory.

159
00:05:59,000 --> 00:06:01,000
So we can have the memory from anywhere

160
00:06:01,000 --> 00:06:06,000
between 128 megabytes up to 10,240 megabytes of memory.

161
00:06:07,000 --> 00:06:08,000
Obviously, if you have more memory,

162
00:06:08,000 --> 00:06:10,000
you're going to get billed more.

163
00:06:10,000 --> 00:06:11,000
In terms of timeouts,

164
00:06:11,000 --> 00:06:14,000
we can go anywhere between three seconds or five seconds,

165
00:06:14,000 --> 00:06:17,000
all the way to, as you can see, 15 minutes.

166
00:06:17,000 --> 00:06:19,000
So the maximum timeout is 15 minutes,

167
00:06:19,000 --> 00:06:21,000
but you wanna make sure that you're only using the function

168
00:06:21,000 --> 00:06:24,000
for the time that you think it's going to be used for.

169
00:06:24,000 --> 00:06:27,000
And then the execution role is the one that was created

170
00:06:27,000 --> 00:06:29,000
by Lambda in the beginning.

171
00:06:29,000 --> 00:06:31,000
Okay, so those are some of the most important settings.

172
00:06:31,000 --> 00:06:32,000
Okay?

173
00:06:32,000 --> 00:06:35,000
And the other thing we can look at is monitoring.

174
00:06:35,000 --> 00:06:37,000
So in monitoring, we're able to see

175
00:06:37,000 --> 00:06:39,000
what is going on with the Lambda function,

176
00:06:39,000 --> 00:06:40,000
so how many times it was invoked.

177
00:06:40,000 --> 00:06:42,000
So here, one time, how long it lasted,

178
00:06:42,000 --> 00:06:45,000
whether or not there was errors or successes and so on.

179
00:06:45,000 --> 00:06:47,000
So it could be quite helpful.

180
00:06:47,000 --> 00:06:49,000
But we have integration with CloudWatch,

181
00:06:49,000 --> 00:06:51,000
metrics and also CloudWatch Logs.

182
00:06:51,000 --> 00:06:53,000
So right now, we have nothing but we could look

183
00:06:53,000 --> 00:06:57,000
at the CloudWatch Logs right now when the function runs.

184
00:06:57,000 --> 00:07:00,000
So to do so, just refresh on the right hand side

185
00:07:00,000 --> 00:07:02,000
the recent invocations and we can see

186
00:07:02,000 --> 00:07:03,000
that there's a log stream right here.

187
00:07:03,000 --> 00:07:04,000
So if I click on it,

188
00:07:04,000 --> 00:07:08,000
I am taken directly into the CloudWatch Logs,

189
00:07:08,000 --> 00:07:09,000
and we can see that on the CloudWatch Logs,

190
00:07:09,000 --> 00:07:13,000
we have all the logs of the invocation

191
00:07:13,000 --> 00:07:14,000
of this Lambda function.

192
00:07:14,000 --> 00:07:15,000
And this is within a log group

193
00:07:15,000 --> 00:07:17,000
called AWS Lambda, Demo Lambda,

194
00:07:17,000 --> 00:07:18,000
and Demo Lambda is the name

195
00:07:18,000 --> 00:07:21,000
of my Lambda function within my region, obviously.

196
00:07:21,000 --> 00:07:22,000
And we have one log stream right here.

197
00:07:22,000 --> 00:07:25,000
So we get all the logs into Lambdas.

198
00:07:25,000 --> 00:07:27,000
And other things you can try is to modify the code.

199
00:07:27,000 --> 00:07:30,000
For example, if we take this code,

200
00:07:30,000 --> 00:07:31,000
we go to the Lambda function,

201
00:07:31,000 --> 00:07:33,000
and I will comment this line of code

202
00:07:33,000 --> 00:07:38,000
by having a hashtag and uncomment this one,

203
00:07:38,000 --> 00:07:39,000
this is going to raise an exception.

204
00:07:39,000 --> 00:07:42,000
So to do so, I need to first deploy the changes

205
00:07:42,000 --> 00:07:43,000
by clicking on Deploy.

206
00:07:43,000 --> 00:07:45,000
Now, the changes have been deployed,

207
00:07:45,000 --> 00:07:47,000
and now, I can test my function.

208
00:07:47,000 --> 00:07:50,000
And in this type, we get a execution result,

209
00:07:50,000 --> 00:07:52,000
which is an error where something went wrong,

210
00:07:52,000 --> 00:07:54,000
type is exception, as we can see,

211
00:07:54,000 --> 00:07:56,000
something went wrong which was triggered

212
00:07:56,000 --> 00:07:59,000
by this code or line of code right here.

213
00:07:59,000 --> 00:08:02,000
So any type of errors also will be reported by Lambda,

214
00:08:02,000 --> 00:08:04,000
and you could look into CloudWatch Logs

215
00:08:04,000 --> 00:08:08,000
to understand as well where the log of the error happens.

216
00:08:08,000 --> 00:08:09,000
So if I go back into CloudWatch Logs,

217
00:08:09,000 --> 00:08:11,000
there's a second log stream right here,

218
00:08:11,000 --> 00:08:13,000
which I'm going to open and we get

219
00:08:13,000 --> 00:08:14,000
this exception right here.

220
00:08:14,000 --> 00:08:17,000
So it's possible for us to go back as well to the logs

221
00:08:17,000 --> 00:08:18,000
of the exception within CloudWatch Logs

222
00:08:18,000 --> 00:08:21,000
to understand the root cause of the issue.

223
00:08:21,000 --> 00:08:22,000
So fairly easy.

224
00:08:22,000 --> 00:08:24,000
Now, if you wanna make the function run again fine,

225
00:08:24,000 --> 00:08:28,000
you just reverse what you did and you click on Test.

226
00:08:28,000 --> 00:08:30,000
And again, now, this time,

227
00:08:30,000 --> 00:08:33,000
this Lambda execution function will work.

228
00:08:33,000 --> 00:08:36,000
So some of the last things we may want to check out

229
00:08:36,000 --> 00:08:38,000
is the fact that in here, the runtime settings,

230
00:08:38,000 --> 00:08:40,000
we're running Python 3.7 in this example,

231
00:08:40,000 --> 00:08:43,000
but you may get an updated version maybe on your end.

232
00:08:43,000 --> 00:08:46,000
And the handler is lambda function.lambda handler,

233
00:08:46,000 --> 00:08:49,000
which is saying to look at the lambda function.py file,

234
00:08:49,000 --> 00:08:50,000
and the function named lambda handler.

235
00:08:50,000 --> 00:08:53,000
So if you go up, you can see the function name

236
00:08:53,000 --> 00:08:55,000
is the lambda_function.py,

237
00:08:55,000 --> 00:08:58,000
and within it, we have the lambda_handler function.

238
00:08:58,000 --> 00:09:03,000
So this is why it knew to invoke this function particularly.

239
00:09:03,000 --> 00:09:05,000
Also, we have written to CloudWatch Logs.

240
00:09:05,000 --> 00:09:06,000
And the reason we were able to do so

241
00:09:06,000 --> 00:09:09,000
is that if we go into the configuration of our Lambda,

242
00:09:09,000 --> 00:09:11,000
and go to the permissions tabs,

243
00:09:11,000 --> 00:09:14,000
we have a role name called demo lambda role

244
00:09:14,000 --> 00:09:19,000
that was created for us by the Lambda console.

245
00:09:19,000 --> 00:09:21,000
And if you look at the policy itself,

246
00:09:21,000 --> 00:09:23,000
we can see within the policy summary

247
00:09:23,000 --> 00:09:26,000
that we have access to write to CloudWatch Logs,

248
00:09:26,000 --> 00:09:28,000
which is something you can also see right here

249
00:09:28,000 --> 00:09:29,000
by resource summary,

250
00:09:29,000 --> 00:09:32,000
that CloudWatch Log has three actions and two resources,

251
00:09:32,000 --> 00:09:34,000
which allow us to create log stream,

252
00:09:34,000 --> 00:09:37,000
and log groups and also send the logs to CloudWatch Logs.

253
00:09:37,000 --> 00:09:38,000
So this is the whole idea

254
00:09:38,000 --> 00:09:41,000
behind this permissions tabs right here.

255
00:09:41,000 --> 00:09:43,000
So that's it for this lecture.

256
00:09:43,000 --> 00:09:44,000
I hope you liked it.

257
00:09:44,000 --> 00:09:47,000
And if you are in the certified developer course on AWS,

258
00:09:47,000 --> 00:09:50,000
then get ready for an extra few hours of content on Lambda.

259
00:09:50,000 --> 00:09:53,000
And if you're not, well, this is enough for your exam.

260
00:09:53,000 --> 00:09:55,000
I hope you liked it, and I will see you in the next lecture.


1
00:00:00,000 --> 00:00:03,000
Okay, so now let's talk about AWS Lambda.

2
00:00:03,000 --> 00:00:05,000
So if we use an EC2 instance,

3
00:00:05,000 --> 00:00:07,000
we have a virtual server in the Cloud,

4
00:00:07,000 --> 00:00:10,000
but we are bounded by the amount of memory

5
00:00:10,000 --> 00:00:12,000
and CPU power we give it.

6
00:00:12,000 --> 00:00:13,000
It is continuously running,

7
00:00:13,000 --> 00:00:16,000
even though sometimes we don't use it.

8
00:00:16,000 --> 00:00:19,000
And if we want to scale, we can use an Auto Scaling group,

9
00:00:19,000 --> 00:00:22,000
but that means that we need to add or remove servers

10
00:00:22,000 --> 00:00:23,000
over time.

11
00:00:23,000 --> 00:00:24,000
That may be a little slow,

12
00:00:24,000 --> 00:00:27,000
or they may be sometimes very complicated to implement.

13
00:00:27,000 --> 00:00:30,000
With Lambda, this is a new way to think about it.

14
00:00:30,000 --> 00:00:32,000
In this case, we don't have servers,

15
00:00:32,000 --> 00:00:34,000
we just have virtual functions.

16
00:00:34,000 --> 00:00:37,000
And these functions are limited by time.

17
00:00:37,000 --> 00:00:41,000
So they're intended for shorter type of executions.

18
00:00:41,000 --> 00:00:42,000
They will run on demand.

19
00:00:42,000 --> 00:00:45,000
So that means that whenever we run a function,

20
00:00:45,000 --> 00:00:46,000
it will be there to be run.

21
00:00:46,000 --> 00:00:49,000
But whenever we don't need a function, it will not be run

22
00:00:49,000 --> 00:00:51,000
and we will not be billed for it.

23
00:00:51,000 --> 00:00:52,000
And in case we need scaling,

24
00:00:52,000 --> 00:00:56,000
it's already automated as part of the Lambda service,

25
00:00:56,000 --> 00:01:00,000
and this is why Lambda is a very popular service from AWS.

26
00:01:00,000 --> 00:01:03,000
So the benefits of using AWS Lambda

27
00:01:03,000 --> 00:01:06,000
is that the pricing is, first of all, super easy.

28
00:01:06,000 --> 00:01:10,000
You're going to pay per request and per compute time.

29
00:01:10,000 --> 00:01:13,000
And the free tier is also very generous.

30
00:01:13,000 --> 00:01:18,000
So you get every month, 1 million Lambda invocations,

31
00:01:18,000 --> 00:01:21,000
and 400,000 gigabyte seconds of compute time.

32
00:01:21,000 --> 00:01:24,000
What this means is that you can run on Lambda

33
00:01:24,000 --> 00:01:27,000
some pretty good services for free.

34
00:01:27,000 --> 00:01:31,000
Now it is integrated with the whole AWS suite of services.

35
00:01:31,000 --> 00:01:33,000
So we have integration with so many of the services

36
00:01:33,000 --> 00:01:37,000
we've seen so far, and it is, very important, event-driven.

37
00:01:37,000 --> 00:01:41,000
So the functions will only get invoked by AWS

38
00:01:41,000 --> 00:01:43,000
when something happens, when an event happens

39
00:01:43,000 --> 00:01:45,000
or when needed.

40
00:01:45,000 --> 00:01:48,000
So that makes Lambda a reactive type of service,

41
00:01:48,000 --> 00:01:50,000
which is important going into the exam.

42
00:01:50,000 --> 00:01:53,000
It is fully integrated with many programming languages.

43
00:01:53,000 --> 00:01:55,000
You get easy monitoring through CloudWatch.

44
00:01:55,000 --> 00:01:57,000
We haven't seen what CloudWatch is,

45
00:01:57,000 --> 00:02:00,000
but it will be the monitoring solution in AWS.

46
00:02:00,000 --> 00:02:03,000
And finally, it's easy to get more resources per function.

47
00:02:03,000 --> 00:02:05,000
We can get up to 10 gigabytes of RAM per function,

48
00:02:06,000 --> 00:02:10,000
and if you do increase the RAM, it will also improve the CPU

49
00:02:10,000 --> 00:02:12,000
and the network quality.

50
00:02:12,000 --> 00:02:15,000
So all in all, very good.

51
00:02:15,000 --> 00:02:16,000
AWS Lambda can run many languages

52
00:02:16,000 --> 00:02:21,000
such as Node.js or JavaScript, Python, Java, C#,

53
00:02:21,000 --> 00:02:24,000
so either .NET Core or PowerShell, Ruby,

54
00:02:24,000 --> 00:02:26,000
and it supports many other languages

55
00:02:26,000 --> 00:02:28,000
through something called the Custom Runtime API,

56
00:02:28,000 --> 00:02:31,000
for example, it supports the Rust or the Golang languages

57
00:02:31,000 --> 00:02:33,000
through that.

58
00:02:33,000 --> 00:02:36,000
You also have the option to use containers on Lambda.

59
00:02:36,000 --> 00:02:38,000
So this is a container image,

60
00:02:38,000 --> 00:02:40,000
and you must implement what's called the Lambda Runtime API.

61
00:02:40,000 --> 00:02:43,000
Now, that may be too advanced from an exam perspective,

62
00:02:43,000 --> 00:02:44,000
but what I want you to remember

63
00:02:44,000 --> 00:02:48,000
is that there is a service named ECS or Fargate,

64
00:02:48,000 --> 00:02:51,000
and so to run container images, especially Docker images,

65
00:02:51,000 --> 00:02:54,000
it is always going to be preferred from an exam perspective

66
00:02:54,000 --> 00:02:56,000
to run them on ECS or Fargate versus Lambda,

67
00:02:56,000 --> 00:02:58,000
even though Lambda supports running

68
00:02:58,000 --> 00:03:02,000
some level of customized Docker images.

69
00:03:02,000 --> 00:03:04,000
So you don't need to remember all the languages, of course,

70
00:03:04,000 --> 00:03:05,000
for Lambda, but just remember that it has

71
00:03:05,000 --> 00:03:06,000
some level of support.

72
00:03:06,000 --> 00:03:09,000
The most important ones is going to be for sure Node.js

73
00:03:09,000 --> 00:03:11,000
and Python.

74
00:03:11,000 --> 00:03:14,000
Here is a very common use case of Lambda,

75
00:03:14,000 --> 00:03:18,000
which is to create a serverless thumbnail creation service.

76
00:03:18,000 --> 00:03:23,000
So say we have an S3 bucket and we add images in it,

77
00:03:23,000 --> 00:03:27,000
so our users are uploading a beach image into an S3 bucket.

78
00:03:27,000 --> 00:03:30,000
The S3 bucket will trigger a Lambda function

79
00:03:30,000 --> 00:03:32,000
once the image is uploaded,

80
00:03:32,000 --> 00:03:34,000
and that Lambda function will take that image

81
00:03:34,000 --> 00:03:37,000
and will change it to create a thumbnail.

82
00:03:37,000 --> 00:03:40,000
It will push the thumbnail back into Amazon S3.

83
00:03:40,000 --> 00:03:44,000
So a thumbnail is a smaller version of the image,

84
00:03:44,000 --> 00:03:48,000
or it will also push some metadata about the thumbnail

85
00:03:48,000 --> 00:03:50,000
into DynamoDB.

86
00:03:50,000 --> 00:03:52,000
That includes the image size, the image name,

87
00:03:52,000 --> 00:03:55,000
the creation dates, et cetera, et cetera.

88
00:03:55,000 --> 00:04:00,000
And all of this is fully event-driven and fully serverless.

89
00:04:00,000 --> 00:04:02,000
With S3, we don't provision servers.

90
00:04:02,000 --> 00:04:04,000
With Lambda, we don't provision servers,

91
00:04:04,000 --> 00:04:07,000
and with DynamoDB, as well, we don't provision any servers.

92
00:04:07,000 --> 00:04:08,000
So that is a great pattern

93
00:04:08,000 --> 00:04:10,000
because this serverless thumbnail creation

94
00:04:10,000 --> 00:04:13,000
will scale really, really well,

95
00:04:13,000 --> 00:04:17,000
and we will be able to not worry about provisioning servers

96
00:04:17,000 --> 00:04:19,000
to make it scale.

97
00:04:19,000 --> 00:04:22,000
Now, there's another very common use case for Lambda,

98
00:04:22,000 --> 00:04:24,000
which is to create a serverless CRON job.

99
00:04:24,000 --> 00:04:27,000
So CRON allows you to define a schedule, for example,

100
00:04:27,000 --> 00:04:30,000
every hour, every day, or every Monday,

101
00:04:30,000 --> 00:04:33,000
and based on that schedule to run a script.

102
00:04:33,000 --> 00:04:38,000
And by default, a CRON job is run on a Linux AMI,

103
00:04:38,000 --> 00:04:39,000
so on a Linux machine.

104
00:04:39,000 --> 00:04:40,000
But we are serverless,

105
00:04:40,000 --> 00:04:43,000
so we cannot provision an EC2 instance.

106
00:04:43,000 --> 00:04:45,000
So instead, we'll be using something

107
00:04:45,000 --> 00:04:47,000
called CloudWatch Events or EventBridge,

108
00:04:47,000 --> 00:04:50,000
and this service, that we'll see later on in this course,

109
00:04:50,000 --> 00:04:54,000
will be triggering every one hour our Lambda function

110
00:04:54,000 --> 00:04:55,000
to perform a task.

111
00:04:55,000 --> 00:04:58,000
And effectively, we have no servers in this

112
00:04:58,000 --> 00:05:00,000
because CloudWatch Events is serverless

113
00:05:00,000 --> 00:05:01,000
and Lambda is serverless,

114
00:05:01,000 --> 00:05:04,000
and so effectively we're launching a script every hour

115
00:05:04,000 --> 00:05:06,000
through a Lambda function.

116
00:05:06,000 --> 00:05:08,000
So I hope you can see now the trigger of it,

117
00:05:08,000 --> 00:05:11,000
the Lambda functions is really for serverless functions

118
00:05:11,000 --> 00:05:12,000
in the Cloud.

119
00:05:12,000 --> 00:05:14,000
Now, let's just talk about the pricing.

120
00:05:14,000 --> 00:05:16,000
So you can find the Lambda pricing at this URL,

121
00:05:16,000 --> 00:05:18,000
but it's very simple.

122
00:05:18,000 --> 00:05:21,000
You pay per call, so that means the first 1 million

123
00:05:21,000 --> 00:05:22,000
Lambda invocations are free,

124
00:05:24,000 --> 00:05:26,000
and then it's also very, very cheap.

125
00:05:26,000 --> 00:05:27,000
You're going to pay 20 cents

126
00:05:27,000 --> 00:05:30,000
per 1 million requests thereafter.

127
00:05:30,000 --> 00:05:32,000
You also going to pay for the duration.

128
00:05:32,000 --> 00:05:36,000
So the free tier, as I said, is 400,000 gigabyte seconds

129
00:05:36,000 --> 00:05:38,000
of compute time for free.

130
00:05:38,000 --> 00:05:40,000
And that means it's 400,000 seconds

131
00:05:40,000 --> 00:05:42,000
if the function has one gigabyte of RAM

132
00:05:42,000 --> 00:05:44,000
or 3.2 million seconds

133
00:05:44,000 --> 00:05:48,000
if the function has 128 megabyte of RAM.

134
00:05:48,000 --> 00:05:50,000
After that, you're going to pay $1

135
00:05:50,000 --> 00:05:52,000
for 600,000 gigabyte seconds.

136
00:05:52,000 --> 00:05:54,000
So all in all, the bottom line

137
00:05:54,000 --> 00:05:58,000
is that it's going to be very cheap to run Lambda on AWS,

138
00:05:58,000 --> 00:06:00,000
and so it's a very popular service

139
00:06:00,000 --> 00:06:04,000
to run your serverless applications and websites.

140
00:06:04,000 --> 00:06:06,000
And going into the CCP exam,

141
00:06:06,000 --> 00:06:08,000
you need to remember that Lambda pricing

142
00:06:08,000 --> 00:06:11,000
is based on calls and duration.

143
00:06:11,000 --> 00:06:12,000
So that's it for this lecture.

144
00:06:12,000 --> 00:06:15,000
I hope you liked it, and I will see you in the next lecture.


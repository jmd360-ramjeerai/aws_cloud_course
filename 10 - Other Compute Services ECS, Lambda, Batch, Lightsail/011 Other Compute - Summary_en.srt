1
00:00:00,000 --> 00:00:02,000
Okay, so let's do a summary of all

2
00:00:02,000 --> 00:00:04,000
these new compute services we've just learned about.

3
00:00:04,000 --> 00:00:06,000
And the first thing is that we learned about Docker,

4
00:00:06,000 --> 00:00:08,000
which is a technology,

5
00:00:08,000 --> 00:00:11,000
a container technology that allows you to run applications.

6
00:00:11,000 --> 00:00:14,000
And we've seen how to run Docker on AWS.

7
00:00:14,000 --> 00:00:16,000
The first way is to use ECS.

8
00:00:16,000 --> 00:00:18,000
And this is going to allow you to run your Docker containers

9
00:00:18,000 --> 00:00:22,000
on EC2 instances, but you have to provision

10
00:00:22,000 --> 00:00:24,000
these instances in advance.

11
00:00:24,000 --> 00:00:26,000
For Fargate, it is the exact same way

12
00:00:26,000 --> 00:00:28,000
but this time we run the Docker containers

13
00:00:28,000 --> 00:00:30,000
without provisioning the infrastructure,

14
00:00:30,000 --> 00:00:33,000
it is transparent to us.

15
00:00:33,000 --> 00:00:35,000
And then next Fargate, a serverless offering

16
00:00:35,000 --> 00:00:38,000
because we don't manage any EC2 instances

17
00:00:38,000 --> 00:00:41,000
to run these Docker containers.

18
00:00:41,000 --> 00:00:44,000
These Docker containers can be stored on the AWS using ECR,

19
00:00:44,000 --> 00:00:48,000
which has a Private Docker Images Repository.

20
00:00:48,000 --> 00:00:50,000
And we've also seen about the batch service.

21
00:00:50,000 --> 00:00:52,000
Batch allows you to run batch jobs on AWS

22
00:00:52,000 --> 00:00:56,000
across a set of managed EC2 instances.

23
00:00:56,000 --> 00:00:58,000
And actually, the batch service actually runs

24
00:00:58,000 --> 00:01:01,000
on top of the ECS service.

25
00:01:01,000 --> 00:01:04,000
We've finally seen about a new type of service

26
00:01:04,000 --> 00:01:07,000
to run predictable and low pricing simple applications

27
00:01:07,000 --> 00:01:09,000
and database techs, which is LightSail,

28
00:01:09,000 --> 00:01:12,000
which is most likely going to be a distractor at the exam

29
00:01:12,000 --> 00:01:14,000
but we've done a hands-on, and now we knew what to expect

30
00:01:14,000 --> 00:01:16,000
and how the service works.

31
00:01:17,000 --> 00:01:19,000
So now let's talk about Lambda.

32
00:01:19,000 --> 00:01:21,000
Lambda is going to be a serverless service

33
00:01:21,000 --> 00:01:22,000
which is going to give you

34
00:01:22,000 --> 00:01:25,000
a capability of function as a service,

35
00:01:25,000 --> 00:01:27,000
and it's going to have seamless scaling.

36
00:01:27,000 --> 00:01:28,000
So from one invocation

37
00:01:28,000 --> 00:01:30,000
to thousands of invocation per second,

38
00:01:30,000 --> 00:01:31,000
and it's fully reactive.

39
00:01:31,000 --> 00:01:34,000
You have two components for building of Lambda.

40
00:01:34,000 --> 00:01:35,000
You have by the time run,

41
00:01:35,000 --> 00:01:38,000
times the amount of memory provisions

42
00:01:38,000 --> 00:01:39,000
for the Lambda function.

43
00:01:39,000 --> 00:01:41,000
And also by the number of times your Lambda function

44
00:01:41,000 --> 00:01:43,000
has been invoked.

45
00:01:43,000 --> 00:01:45,000
In terms of language supports,

46
00:01:45,000 --> 00:01:48,000
it supports many different kinds of programming languages.

47
00:01:48,000 --> 00:01:51,000
And even though it supports container images

48
00:01:51,000 --> 00:01:53,000
and then need to implement a specific runtime API.

49
00:01:53,000 --> 00:01:56,000
And so I like to say that Lambda does not support

50
00:01:56,000 --> 00:01:58,000
arbitrary Docker images,

51
00:01:58,000 --> 00:02:01,000
for this you would use ECS and Fargate,

52
00:02:01,000 --> 00:02:03,000
but if your Docker image does implement

53
00:02:03,000 --> 00:02:05,000
the Lambda container Runtime API,

54
00:02:05,000 --> 00:02:07,000
then you can run Docker images on Lambda,

55
00:02:07,000 --> 00:02:09,000
but this is not the standard again.

56
00:02:09,000 --> 00:02:12,000
The invocation time is up to 15 minutes

57
00:02:12,000 --> 00:02:15,000
and the use cases for Lambda is to create funnels

58
00:02:15,000 --> 00:02:18,000
for images uploaded onto Amazon history, for example,

59
00:02:18,000 --> 00:02:21,000
or to run a serverless Cron job.

60
00:02:21,000 --> 00:02:24,000
Finally, if we wanted to expose our Lambda functions

61
00:02:24,000 --> 00:02:27,000
as APIs, we would use another serverless service

62
00:02:27,000 --> 00:02:29,000
called the API Gateway,

63
00:02:29,000 --> 00:02:32,000
that would allow us to expose our functions as HTTP APIs,

64
00:02:32,000 --> 00:02:36,000
but also give us capabilities around security, front Ling,

65
00:02:36,000 --> 00:02:38,000
API keys, and so on.

66
00:02:38,000 --> 00:02:40,000
So that's it for this section, I hope you liked it.

67
00:02:40,000 --> 00:02:42,000
And I will see you in the next section.

